<?php
// $Id$

/**
 * @file
 * Defines a field type for referencing an Amazon product.
 */


/**
 * Implementation of hook_field_info().
 */
function asin_field_info() {
  return array(
    'asin' => array(
      'label' => t('Amazon item'),
      'description' => t('Store the id of a product listed on Amazon.com.'),
      'default_widget' => 'asin_text',
      'default_formatter' => 'default',
    ),
  );
}

/**
* Implements hook_field_schema().
*/
function asin_field_schema($field) {
  $columns = array(
    'asin' => array('type' => 'varchar', 'length' => 32, 'not null' => FALSE)
  );
  return array(
    'columns' => $columns,
  );
}


/**
 * @todo: This is the leftover from D6 hook_field. Seems that there's some
 * views stuff yet to be done?
 */
function asin_field_settings($op, $field) {
// TODO: Views data stuff
      $data = content_views_field_views_data($field);
      $db_info = content_database_info($field);
      $table_alias = content_views_tablename($field);

      // Filter: Add a 'many to one' filter.
      $copy = $data[$table_alias][$field['field_name'] . '_asin'];
      $copy['title'] = t('@label (!name) - Allowed values', array('@label' => $field['widget']['label'], '!name' => $field['field_name']));
      $copy['filter']['handler'] = 'views_handler_filter_many_to_one';
      unset($copy['field'], $copy['argument'], $copy['sort']);
      $data[$table_alias][$field['field_name'] . '_value_many_to_one'] = $copy;
      // Argument : swap the handler to the 'many to one' operator.
      $data[$table_alias][$field['field_name'] . '_value']['argument']['handler'] = 'views_handler_argument_many_to_one';

      // Add a relationship for related node.
      $data[$table_alias][$field['field_name'] . '_asin']['relationship'] = array(
        'base' => 'amazon_item',
        'field' => $db_info['columns']['asin']['column'],
        'handler' => 'views_handler_relationship',
      );
      return $data;
}


/**
 * Implements hook_field_validate()
 *
 * Checks each instance to see if it's valid on Amazon.
 */
function asin_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => &$item) {
    $asin = $item['asin'];
    if (!empty($asin)) { // Only continue if the ASIN is populated.
      $results = _asin_load_items($asin);
      if (empty($results)) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => t('No Amazon product with the ASIN "%id" could be located.', array('%id' => $item['asin'])),
        );
      }
    }
  }
}

/**
 * Trim spaces from the front/back of each ASIN in an array.
 *
 * @param $items
 *   Array of ASINS
 * @return
 *   Same array of ASINs, trimmed
 */
function _asin_trim_items(&$items) {
  foreach ($items as $delta => &$item) {
    $item = trim($item);
  }
}

/**
 * Get an array of items from Amazon.
 *
 * @param $items
 *   An array of ASIN strings
 * @return
 *   An array of amazon item arrays, keyed by ASIN.
 */
function _asin_load_items(&$items) {
  if (is_string($items)) {
    $items = array($items);
  }
  $asins = array();
  foreach ($items as $delta => &$item) {
    if (!empty($item)) {
      $asin = trim($item);
      $asin = amazon_convert_to_asin($asin);
      $asins[] = $asin;
    }
  }
  return amazon_item_lookup($asins);
}

/**
 * Implements of hook_field_is_empty().
 */
function asin_field_is_empty($item, $field) {
  if (empty($item['asin'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function asin_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Small image and basic info'),
      'field types' => array('asin'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'details' => array(
      'label' => t('Small image and full info'),
      'field types' => array('asin'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'thumbnail' => array(
      'label' => t('Large image'),
      'field types' => array('asin'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'inline' => array(
      'label' => t('Title as link'),
      'field types' => array('asin'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function asin_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    $asin = trim($item['asin']);
    $asins = array();
    if (!empty($asin)) {
      $asins = amazon_item_lookup("$asin");
      // TODO: kill off amazon_inline_item. There's no reason for it to clutter the earth.
      $theme_function = $display['type'] == 'inline' ? 'amazon_inline_item' : "amazon_item_{$display['type']}";
      $element[$delta] = array('#markup' => theme($theme_function, array('item' => $asins["$asin"])));
    }
  }
  return $element;
}


/**
 * Implementation of hook_field_widget_info().
 *
 */
function asin_field_widget_info() {
  return array(
    'asin_text' => array(
      'label' => t('Amazon ASIN Text field'),
      'field types' => array('asin'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 */
function asin_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
  $element = $base;
  $element['asin'] = $base + array(
    '#type' => 'textfield',
    '#size' => 15,
    '#default_value' => !empty($items[$delta]['asin']) ? $items[$delta]['asin'] : '',
  );

  return $element;
}

