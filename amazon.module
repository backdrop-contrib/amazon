<?php
// $Id$

/**
 * Amazon Integration
 *
 * Provides a Drupal wrapper and caching mechanism for the Amazon
 * Ecommerce APIs. This module provides no user-visible functionality
 * save configuration and setup.
 */

define('AMAZON_ECS_SCHEMA', '2007-10-29');
define('AMAZON_PARTICIPANT_TYPES', 'Author,Artist,Actor,Director,Creator');

// Other common sizes include SwatchImage, TinyImage, and ThumbnailImage.
define('AMAZON_IMAGE_SIZES', 'SmallImage,MediumImage,LargeImage');

/**
 * Implementation of hook_menu. Adds the url path for the Amazon
 * settings page.
 */
function amazon_menu() {
  $items = array();
  $items['admin/settings/amazon'] = array(
    'title' => 'Amazon API',
    'description' => 'Global settings for the Amazon Ecommerce API.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_settings_form'),
    'file' => 'amazon_admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer amazon'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/settings/amazon/storage'] = array(
    'title' => 'Storage',
    'description' => 'Local data storage settings for Amazon products.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_storage_settings_form'),
    'file' => 'amazon_admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer amazon'),
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/settings/amazon/test'] = array(
    'title' => 'Test',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_test_form'),
    'file' => 'amazon_admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access devel information'),
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/settings/amazon/upgrade'] = array(
    'page callback' => '_amazon_upgrade',
    'file' => 'amazon_admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer amazon'),
    'type' => MENU_CALLBACK
  );
  $items['admin/settings/amazon/api'] = array(
    'title' => 'Settings',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK
  );

  return $items;
}

/**
 * Implementation of hook_perm
 */
function amazon_perm() {
  return array('administer amazon');
}


function amazon_http_request($operation, $parameters = array(), $locale = NULL) {
  if (!isset($locale)) {
    $locale = variable_get('amazon_locale', 'US');
  }
  $metadata = amazon_data_cache();
  $locale_data = $metadata['locales'][$locale];

  // Populate the params with default data.
  $parameters += array(
    'Service' => 'AWSECommerceService',
    'Version' => AMAZON_ECS_SCHEMA,
    'AWSAccessKeyId' => variable_get('amazon_aws_access_key', '0CD9RCQYM0TBVH55NB82'),
    'Operation' => $operation,
  );
  if ($associate_id = amazon_get_associate_id()) {
    $parameters += array(
      'AssociateTag' => $associate_id,
    );
  }

  $params = array();
  foreach($parameters as $key => $value) {
    if (is_array($value)) {
      $value = implode(',', $value);
    }
    $params[] = urlencode($key) .'='. urlencode($value);
  }
  module_invoke_all('amazon_request', $parameters);
  $url = $locale_data['url'] .'?'. implode('&', $params);
  // Make the request and return a SimpleXML object.
  $results = drupal_http_request($url, array(), 'GET');
  $xml = new SimpleXMLElement($results->data);
  return $xml;
}

function amazon_item_lookup($item_ids = array(), $force_lookup = TRUE) {
  if (is_string($item_ids)) {
    $item_ids = array($item_ids);
  }
  $items = array();
  if (!$force_lookup) {
    $items = amazon_item_lookup_from_db($item_ids);
  }

  $items_to_fetch = array();
  foreach ($item_ids as $item_id) {
    if (!isset($items[$item_id])) {
      $items_to_fetch[] = $item_id;
    }
  }
  $items_from_web = amazon_item_lookup_from_web($items_to_fetch);
  return array_merge($items, $items_from_web);
}

function amazon_item_lookup_from_web($item_ids = array()) {
  $params = array(
    'ItemId' => implode(',', $item_ids),
    'ResponseGroup' => 'Large',
  );
  $results = amazon_http_request('ItemLookup', $params);
  if (!empty($results->Error)) {
    return FALSE;
  }
  $items = array();
  if (is_array($results->Items->Item)) {
    foreach($results->Items->Item as $xml) {
      $item = amazon_item_clean_xml($xml);
      $items[$item['asin']] = $item;
    }
  }
  else {
    $item = amazon_item_clean_xml($results->Items->Item);
    $items[$item['asin']] = $item;
  }

  // Attempt to persist Amazon data.
  foreach($items as $item) {
    amazon_item_save($item);
  }
  return $items;
}

function amazon_item_lookup_from_db($item_ids = array()) {
  $sql = "SELECT * FROM {amazon_item} ai WHERE ai.asin IN (''";
  $params = array();
  foreach ($item_ids as $item_id) {
    $query .= ", '%s'";
    $params[] = $item_id;
  }
  $results = db_query($sql, $params);
  $return = array();
  while ($object = db_fetch_object($results)) {
    _amazon_load_child_data($object);
    module_invoke_all('amazon_item_load', $object);
    $return[$object->asin] = $object;
  }
  return $return;
}

function _amazon_load_child_data(&$object) {
  $result = db_query("SELECT feature FROM {amazon_item_feature} WHERE asin = '%s'", $object->asin);
  while ($feature = db_fetch_object($result)) {
    $object->Feature[] = $feature->feature;
  }

  $result = db_query("SELECT type, participant FROM {amazon_item_participant} WHERE asin = '%s'", $object->asin);
  while ($participant = db_fetch_object($result)) {
    $object->{$participant->type}[] = $participant;
  }

  $result = db_query("SELECT feature FROM {amazon_item_image} WHERE asin = '%s'", $object->asin);
  while ($image = db_fetch_object($result)) {
    $object['Images'][$image->width .'x'. $image->height] = $image;
  }
}

function amazon_item_clean_xml($xml) {
  $metadata = amazon_data_cache();
  $item = array();

  // Pull the absolute basic information Amazon keeps at the top level
  // of the XML tree, cast to string, and move on.
  $item['asin'] = (string)$xml->ASIN;
  $item['salesrank'] = (string)$xml->SalesRank;
  $item['detailpageurl'] = (string)$xml->DetailPageURL;

  $participant_types = split(',', AMAZON_PARTICIPANT_TYPES);

  // Pull in the basics of the ItemAttributes collection.
  foreach((array)($xml->ItemAttributes) as $key => $value) {
    if (is_string($value) && !in_array($key, $participant_types)) {
      $key = strtolower($key);
      $item[$key] = $value;
    }
  }

  // Handle the Authors/Artists/Etc. This is a little bit ugly, but it's kind of
  // unavoidable given Amazon's penchant for using a duplicate element types
  // rather than wrapper elements.
  foreach ($participant_types as $key) {
    if (isset($xml->ItemAttributes->$key)) {
      if (is_array($xml->ItemAttributes->$key)) {
        foreach($xml->ItemAttributes->$key as $value) {
          $item[strtolower($key)][] = $value;
        }
      }
      else {
        $item[strtolower($key)] = array((string)$xml->ItemAttributes->$key);
      }
    }
  }

  // Handle the product images. In theory, there could be a million different
  // product image types. We're only going to check for the most common ones
  // and ignore the rest for now.
  $supported_sizes = split(',', AMAZON_IMAGE_SIZES);
  if (isset($xml->ImageSets->ImageSet)) {
    foreach((array)$xml->ImageSets->ImageSet as $key => $data) {
      if (in_array($key, $supported_sizes)) {
        $item['imagesets'][strtolower($key)] = array(
          'url' => (string)$data->URL,
          'height' => (string)$data->Height,
          'width' => (string)$data->Width,
        );
      }
    }
  }

  
  // Give other modules an opportunity to pull out other bits of Amazon data
  // that would otherwise be ignored.
  foreach (module_implements('_amazon_item_clean_xml') as $module) {
    $function = $module .'_amazon_item_clean_xml';
    $function($item, $xml);
  }
  return $item;
}

function amazon_item_insert($item) {
  $metadata = amazon_data_cache();
  drupal_write_record('amazon_item', $item);

  // Handle the various credits for a product, including Artist, Author,
  // Actor, etc. We map these to a separate table.
  if (in_array('creators', variable_get('amazon_core_data', array('creators', 'images')))) {
    $participant_types = split(',', AMAZON_PARTICIPANT_TYPES);
    foreach ($participant_types as $type) {
      if (isset($item[strtolower($type)])){
        foreach($item[strtolower($type)] as $participant) {
          $item_participant = array('asin' => $item['asin'], 'type' => strtolower($type), 'participant' => $participant);
          drupal_write_record('amazon_item_participant', $item_participant);
        }
      }
    }
  }

  // Save the product images if they exist.
  if (in_array('images', variable_get('amazon_core_data', array('creators', 'images')))) {
    if (isset($item['imagesets'])) {
      foreach($item['imagesets'] as $size => $data) {
        $image = array('asin' => $item['asin'], 'size' => $size, 'height' => $data['height'], 'width' => $data['width'], 'url' => $data['url']);
        drupal_write_record('amazon_item_image', $image);
      }
    }
  }

  module_invoke_all('amazon_item_insert', $item);
}

function amazon_item_save($item) {
  // Only save if the user has turned on local persistence.
  if (variable_get('amazon_cache', TRUE) || $force_save) {
    // We have boatloads of data to insert in here, so we're going to
    // cheat and blow away the old entries and re-insert them in 'silent'
    // mode.
    amazon_item_delete($item['asin']);
    amazon_item_insert($item, TRUE);
  }
}

function amazon_item_delete($asin, $silent = FALSE) {
  module_invoke_all('amazon_item_delete', $asin);
  db_query("DELETE FROM {amazon_item} WHERE asin = '%s'", $asin);
  db_query("DELETE FROM {amazon_item_participant} WHERE asin = '%s'", $asin);
  db_query("DELETE FROM {amazon_item_image} WHERE asin = '%s'", $asin);
}

/**
 * Utility functions for managing AmazonItem/Node relationships
 */

function amazon_item_node_save($asin, $nid, $module = 'amazon', $weight = 0) {
  amazon_item_node_delete($asin, $nid, $module);
  db_query("INSERT INTO {amazon_item_node} (asin, nid, module, weight) VALUES ('%s', %d, '%s', %d)", $asin, $nid, $module, $weight);
}

function amazon_item_node_delete($asin = NULL, $nid = NULL, $module = NULL) {
  $sql = "DELETE FROM {amazon_item_node} WHERE 1 = 1";
  $params = array();
  if (isset($asin)) {
    $sql = " AND asin = '%s'";
    $params[] = $asin;
  }

  if (isset($nid)) {
    $sql = " AND nid = %d";
    $params[] = $nid;
  }

  if (isset($module)) {
    $sql = " AND module = '%s'";
    $params[] = $module;
  }

  if (count($params)) {
    db_query($sql, $params);
  }
}


/**
 * Misc. helper functions for managing the wide array of Amazon
 * data bitsies.
 */

function amazon_data_cache($reset = FALSE) {
  static $data;
  if (!isset($data) || $reset) {
    if (!$reset && ($cache = cache_get('amazon:metadata')) && !empty($cache->data)) {
      $data = $cache->data;
    }
    else {
      $data = array();
      $data['locales'] = _amazon_default_locales();

      drupal_alter('amazon_metadata', $data);
      cache_set('amazon:metadata', $data);
    }
  }
  return $data;
}

function _amazon_default_locales() {
  $locales = array();
  $locales['US'] = array(
    'url'     => 'http://ecs.amazonaws.com/onca/xml',
    'name'    => t('United States'),
  );
  $locales['UK'] = array(
    'url'     => 'http://ecs.amazonaws.uk/onca/xml',
    'name'    => t('United Kingdom'),
  );
  $locales['JP'] = array(
    'url'     => 'http://ecs.amazonaws.jp/onca/xml',
    'name'    => t('Japan'),
  );
  $locales['FR'] = array(
    'url'     => 'http://ecs.amazonaws.fr/onca/xml',
    'name'    => t('France'),
  );
  $locales['DE'] = array(
    'url'     => 'http://ecs.amazonaws.de/onca/xml',
    'name'    => t('Germany'),
  );
  $locales['CA'] = array(
    'url'     => 'http://ecs.amazonaws.ca/onca/xml',
    'name'    => t('Canada'),
  );

  return $locales;
}

function amazon_get_associate_id() {
  switch (variable_get('amazon_associate_setting', 'author')) {
    case 'association':
      return 'drupal0a-20';
      break;
    case 'author':
      return 'viaposit-20';
      break;
    case 'custom':
      return variable_get('amazon_custom_associate_id', '');
      break;
    default:
      return FALSE;
  }
}

function amazon_cron() {
  // Here, we're going to chug through all the existing ASINs and update them.
  // We'll grab 20 at a time to avoid thrashing things.
  $sql = "SELECT asin FROM {amazon_item} WHERE timestamp < %d";
  $result = db_query_range($sql, time() - variable_get('amazon_refresh_schedule', 86400), 1, 20);
  $asins = array();

  while($item = db_fetch_array($result)) {
    $asins[] = $item['asin'];
  }

  if ($items = amazon_item_lookup_from_web($asins)) {
    foreach ($items as $item) {
      amazon_item_save($item);
    }
  }
  else {
    watchdog('Amazon', t('Amazon items could not be updated.'));
  }
}