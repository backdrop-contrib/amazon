<?php

require_once('amazon.inc');
require_once('amazon_init.inc');

/**
 * support functions
 * _amazon_product_db_data_array(&$node) = array of product data from database for a all product associated
 *                                         with a node
 * _amazon_product_data_array($node) = array of product data from Amazon.com for all products associated with
 *                                     a node
 * _amazon_product_db_data(&$node) = product data from database for a single product (amazon-node)
 * _amazon_product_data(&$node) = checks database then Amazon.com for product data
 * _amazon_product_db_data_from_ASIN($ASINList) = array of product data from database for a all products in a
 *                                                comma-delimited list of ASINs
 * _to_amazonnode($amazon) = create a new amazon-node item from amazon item data
*/
function _amazon_product_db_data(&$node) {
  $nid = (is_numeric($node)? $node : $node->nid);
  if ($nid) {
    $ASIN_query_string = "SELECT a.* FROM {amazonnode} a JOIN {node} n ON n.nid = a.nid WHERE n.nid = $nid";
  } elseif ($node->ASIN) {
    $ASIN_query_string = "SELECT a.* FROM {amazonnode} a WHERE ASIN = '$node->ASIN' AND ntype = 'amazon-node'";
  }
  $ASIN_query = db_query($ASIN_query_string);
  if (db_num_rows($ASIN_query)) {
    $ASIN_query_record = db_fetch_object($ASIN_query);
    $amazondata = db_fetch_object(db_query("SELECT * FROM {amazonitem} WHERE ASIN = '$ASIN_query_record->ASIN'"));
    $amazondata->Author = unserialize($amazondata->Author);
  }
  return $amazondata;
}
function _amazon_product_db_data_array(&$node) {
  $nid = (is_numeric($node)? $node : $node->nid);
  if ($nid) {
    $ASIN_query_string = "SELECT a.* FROM {amazonnode} a JOIN {node} n ON n.nid = a.nid WHERE n.nid = $nid";
  } elseif ($node->ASIN) {
    $ASIN_query_string = "SELECT a.* FROM {amazonnode} a WHERE ASIN = '$node->ASIN' AND ntype = 'amazon-node'";
  }
  $ASIN_query = db_query($ASIN_query_string);
  while ($ASIN_query_record =  db_fetch_object($ASIN_query)) {
    $amazondata = db_fetch_object(db_query("SELECT * FROM {amazonitem} WHERE ASIN = '$ASIN_query_record->ASIN'"));
    $amazondata->Author = unserialize($amazondata->Author);
    $amazondata_array[] = $amazondata;
  }
  return $amazondata_array;
}

function _amazon_product_data_array($node) {

  $REST_params = array('Operation' => 'ItemLookup', 'ItemId' => $node->ASIN,
                       'AssociateTag'=> variable_get('amazon_associate_id', ''),
                       'ResponseGroup' => 'Request,Small,ItemAttributes,Images,Offers',
                       'MerchantId' => 'Featured');
  return amazon_get_items($REST_params);
}

function _amazon_product_data(&$node) {
  $amazondata = _amazon_product_db_data($node);
  if (!$amazondata){
    $amazondata_array = _amazon_product_data_array($node);
    if (count($amazondata_array)) {
      $amazondata = $amazondata_array[0];
      $amazondata->new_node = TRUE;
    }
  }
  if ($amazondata) {
    foreach ($amazondata as $key => $value) {
      $node->$key = $value;
    }
    if ($node->type == 'amazon-node') $node->title = $amazondata->Title;
  }
  return $amazondata;
}


function _amazon_product_db_data_from_ASIN($ASINList) {
  foreach($ASINList as $ASIN) {
    $out_ASIN_array[] = "'$ASIN'";
  }
  $out_ASIN_list = implode(',', $out_ASIN_array);
  $ASIN_query_string = "SELECT a.* FROM {amazonnode} a WHERE ASIN IN ($out_ASIN_list) AND ntype = 'amazon-node'";
  $ASIN_query = db_query($ASIN_query_string);
  while ($ASIN_query_record =  db_fetch_object($ASIN_query)) {
    $amazondata = db_fetch_object(db_query("SELECT * FROM {amazonitem} WHERE ASIN = '$ASIN_query_record->ASIN'"));
    $amazondata->Author = unserialize($amazondata->Author);
    $amazondata_array[] = $amazondata;
  }
  return $amazondata_array;
}

function _to_amazonnode($amazon) {
  global $user;
  $exists_query = db_query('SELECT n.nid FROM {node} n JOIN {amazonnode} a ON n.nid = a.nid '
                    ."WHERE n.type = 'amazon-node' AND a.ASIN = '$amazon->ASIN'");
  $exists = db_num_rows($exists_query);
  if (!$exists) {
    $amazon->type = 'amazon-node';
    if (!$amazon->uid) $amazonreview->uid = $user->uid;
    $amazon->title = $amazon->Title;
    $node_options = variable_get("node_options_amazon-node", array());
    if (count($node_options) > 0) {
      foreach($node_options as $value) {
        $amazon->$value = 1;
      }
    }
    $amazon->comment = variable_get("comment_", 2);
    unset($amazon->nid);
    unset($amazon->body);
    unset($amazon->teaser);
    module_invoke('node', 'save', $amazon);
  }
}

/**
 * theme functions
*/
function theme_amazon_searchitem($node) {

  $output = '';
  $output .= "<tr>";
  $output .= '<td>';
  $output .= "<input type=\"checkbox\" class=\"form-checkbox\" name=\"ASINS[]\" value=\"$node->ASIN\" />";
  $output .= '</td>';
  $output .= "<td>";
  $output .= "<img src=\"$node->SmallImageURL\" height=\"$node->SmallImageHeight\" width=\"$node->SmallImageWidth\" />";
  $output .= '</td>';
  $output .= "<td>";
  if ($node->DetailPageURL) {
    $output .= "<a href=\"$node->DetailPageURL\" target=\"_blank\">";
  }
  $output .= $node->Title . '<br />';
  $output .= '</a>';
  if ($node->Author) {
    $output .= 'Author: ' . implode(",",$node->Author) . '<br />';
  }
  if ($node->ASIN) {
    $output .= 'ASIN: ' . $node->ASIN . '<br />';
  }
  if ($node->Binding) {
    $output .= "Binding: $node->Binding <br />";
  }
  if ($node->listFormattedPrice) {
    $output .= "List price: $node->listFormattedPrice $node->listCurrencyCode <br />";
  }
  if ($node->FormattedPrice) {
    $output .= "Amazon price: $node->FormattedPrice $node->CurrencyCode<br /><br clear=\"all\" />";
  }
  $output .= '</td>';
  $output .= '</tr>';
  return $output;
}

function theme_amazon_adminitem($node) {

  $output = '';
  $output .= "<tr>";
  $output .= '<td>';
  $output .= "<input type=\"checkbox\" class=\"form-checkbox\" name=\"delete_nid[]\" value=\"$node->nid\" />";
  $output .= '</td>';
  $output .= "<td>";
  $output .= "<img src=\"$node->SmallImageURL\" height=\"$node->SmallImageHeight\" width=\"$node->SmallImageWidth\" />";
  $output .= '</td>';
  $output .= "<td>";
  $output .= "Title: $node->Title <br />";
  $authors = unserialize($node->Author);

  if ($authors) {
    $output .= 'Author: ' . implode(', ', $authors) . '<br />';
  }
  $output .= 'ASIN: ' . $node->ASIN . '<br />';
  $output .= "Binding: $node->Binding <br />";
  if ($node->listFormattedPrice) {
    $output .= "List price: $node->listFormattedPrice $node->listCurrencyCode <br />";
  }
  if ($node->FormattedPrice) {
    $output .= "Amazon price: $node->FormattedPrice $node->CurrencyCode<br /><br clear=\"all\" />";
  }
  $output .= '</td>';
  $output .= '</tr>';
  return $output;
}

function theme_amazon_node($node) {

  $output = '';
  $output .= '<table>';
  $output .= '<tr>';
  if ($node->MediumImageURL) {
    $output .= "<td><a href=\"$node->DetailPageURL\" target=\"_blank\">";
    $output .= "<img src=\"$node->MediumImageURL\" height=\"$node->MediumImageHeight\" width=\"$node->MediumImageWidth\" />";
    $output .= '</a></td>';
  }
  $output .= "<td>";
  if ($node->type <> 'amazon-node') {
    if ($node->DetailPageURL) {
      $output .= "<a href=\"$node->DetailPageURL\" target=\"_blank\">";
    }
    $output .= $node->Title . '<br /><br />';
    $output .= '</a>';
  }
  if ($node->Author) {
    $output .= 'Author: ' . implode(",",$node->Author) . '<br />';
  }
  if ($node->ASIN) {
    $output .= 'ASIN: ' . $node->ASIN . '<br />';
  }
  if ($node->Binding) {
    $output .= "Binding: $node->Binding <br />";
  }
  if ($node->listFormattedPrice) {
    $output .= "List price: $node->listFormattedPrice $node->listCurrencyCode <br />";
  }
  if ($node->FormattedPrice) {
    $output .= "Amazon price: $node->FormattedPrice $node->CurrencyCode<br /><br clear=\"all\" />";
  }
  $output .= '</td>';
  $output .= '</tr>';
  $output .= '</table><br />';
  return $output;
}

function theme_amazon($node) {

  $output = '';
  $output .= '<table>';
  $output .= '<tr>';
  if ($node->MediumImageURL) {
    $output .= "<td><a href=\"$node->DetailPageURL\" target=\"_blank\">";
    $output .= "<img src=\"$node->MediumImageURL\" height=\"$node->MediumImageHeight\" width=\"$node->MediumImageWidth\" />";
    $output .= '</a></td>';
  }
  $output .= "<td>";
  if ($node->type <> 'amazon-node') {
    if ($node->DetailPageURL) {
      $output .= "<a href=\"$node->DetailPageURL\" target=\"_blank\">";
    }
    $output .= $node->Title . '<br /><br />';
    $output .= '</a>';
  }
  if ($node->Author) {
    $output .= 'Author: ' . implode(",",$node->Author) . '<br />';
  }
  if ($node->ASIN) {
    $output .= 'ASIN: ' . $node->ASIN . '<br />';
  }
  if ($node->Binding) {
    $output .= "Binding: $node->Binding <br />";
  }
  if ($node->listFormattedPrice) {
    $output .= "List price: $node->listFormattedPrice $node->listCurrencyCode <br />";
  }
  if ($node->FormattedPrice) {
    $output .= "Amazon price: $node->FormattedPrice $node->CurrencyCode<br /><br clear=\"all\" />";
  }
  $output .= '</td>';
  $output .= '</tr>';
  $output .= '</table><br />';
  return $output;
}

function theme_amazon_related_link($node) {
  $output = '';
  $output .= "<table><tr>";
  $output .= "<td><a href=\"$node->DetailPageURL\" target=\"_blank\">";
  $output .= "<img src=\"$node->SmallImageURL\" height=\"$node->SmallImageHeight\" width=\"$node->SmallImageWidth\" />";
  $output .= '</a></td>';
  $output .= "<td>";
  if ($node->DetailPageURL) {
    $output .= "<a href=\"$node->DetailPageURL\" target=\"_blank\">";
  }
  $output .= $node->Title . '<br />';
  $output .= '</a>';
  if ($node->Author) {
    $output .= 'Author: ' . implode(",",$node->Author) . '<br />';
  }
  if ($node->ASIN) {
    $output .= 'ASIN: ' . $node->ASIN . '<br />';
  }
  $output .= '</td>';
  $output .= '</tr></table>';
  return $output;
}
/**
 * administration and search functions
*/
function _amazon_search_pager($_amazon_search_params) {

  // [[First][Previous] Page X of XXX <-combo/page [Next][Last]]
  $_TotalPages = $_amazon_search_params['TotalPages'];
  $_current_page = $_amazon_search_params['ItemPage'];
  if ($_current_page > 1) {
    $output .= '<div style="float: left">';
    $output .= form_submit(t('First'), 'op');
    $output .= form_submit(t('Previous'), 'op');
    $output .= '</div>';
  }
  if ($_current_page < $_TotalPages) {
    $output .= '<div style="float: right">';
    $output .= form_submit(t('Next'), 'op');
    $output .= form_submit(t('Last'), 'op');
    $output .= '</div>';
  }

  foreach ($_amazon_search_params as $key => $value) {
    $output .= form_hidden($key, $value);
  }
  $output .= '<div style="text-align: center">';
  $output .= "Page $_current_page of $_TotalPages";
  $output .= '</div>';
  return form($output);
}

function _amazon_admin_page_query() {
  return "SELECT n.nid, a.ASIN, a.DetailPageURL, a.SmallImageURL, a.SmallImageHeight, a.SmallImageWidth, a.MediumImageURL, a.MediumImageHeight, a.MediumImageWidth, a.LargeImageURL, a.LargeImageHeight, a.LargeImageWidth, a.Author, a.Binding, a.listAmount, a.listCurrencyCode, a.listFormattedPrice, a.Title, a.Amount, a.CurrencyCode, a.FormattedPrice, a.PriceDate FROM {amazonitem} a JOIN {amazonnode} n on a.ASIN = n.ASIN WHERE n.ntype = 'amazon-node'";
}

function amazon_admin_page() {

  $admin_task = arg(2);
  $output_table = '';
  global $_amazon_search_amazon_shop_URI;
  $_amazon_locale_index =  variable_get('amazon_locale', '0');
  $_amazon_locale_list = array_keys($_amazon_search_amazon_shop_URI);
  $_amazon_locale = $_amazon_locale_list[$_amazon_locale_index];
  $params = $_POST['edit'];
  $op = $_POST['op'];
  switch ($admin_task) {
    case 'import': {
      $searchfor = $params['searchfor'];
      if ($searchfor) {
        // get some Amazon parameters
        $searchtype = $params['searchtype'];
        if ($searchtype == 'ASIN') {
          $REST_params = array('Operation' => 'ItemLookup', 'ItemId' => $searchfor,
                               'AssociateTag'=> variable_get('amazon_associate_id', ''),
                               'ResponseGroup' => 'Request,Small,ItemAttributes,Images,Offers',
                               'MerchantId' => 'Featured', 'AmazonShop' => $_amazon_locale);
        } elseif ($searchtype == 'keyword') {
          $REST_params = array('Operation' => 'ItemSearch', 'SearchIndex' => 'Books',
                               'AssociateTag'=> variable_get('amazon_associate_id', ''),
                               'Keywords' => $searchfor,
                               'ResponseGroup' => 'Request,Small,ItemAttributes,Images,Offers',
                               'MerchantId' => 'Featured', 'AmazonShop' => $_amazon_locale);
        }
        switch ($op) {
          case 'Search':
          case 'First': {
            $REST_params['ItemPage'] = 1;
            break;
          }
          case 'Next': {
            $REST_params['ItemPage'] = $params['itempage'] + 1;
            break;
          }
          case 'Previous': {
            $REST_params['ItemPage'] = $params['itempage'] - 1;
            break;
          }
          case 'Last': {
            $REST_params['ItemPage'] = $params['itempage'];
            break;
          }
        }
        // run the Amazon query
        $searchDOM = amazon_get_DOM($REST_params);
        $search_result = _amazon_items_array_from_DOM($searchDOM);
        // make a table
        foreach($search_result as $amazon_node) {
          $output_table .= theme('amazon_searchitem', $amazon_node);
        }
        $output_table = "<table border=\"1\">$output_table</table>".form_submit('Import');
        $output_table = form($output_table, 'post', 'index.php?q=admin/amazon/manage');
        // make a pager
        if (count($search_result)) {
          $_amazon_params = _amazon_operation_request($searchDOM);
          $pager_params['TotalPages'] = $_amazon_params['stats']['TotalPages'];
          $pager_params['ItemPage'] = $REST_params['ItemPage'];
          $output_table .= form(form_hidden('searchfor', $params['searchfor']) .
                                form_hidden('searchtype', $params['searchtype']) .
                                form_hidden('itempage', $REST_params['ItemPage']) .
                                _amazon_search_pager($pager_params)
                                );
        }
      }
      $search_form = form_textfield('Search for', 'searchfor', '', 50, 128);
      $search_form .= form_radios('Search type', 'searchtype', 'keyword',
                        array('ASIN' => 'ASIN', 'keyword' => 'Keywords')) .
                     form_submit('Search');
      break;
    }
    case 'configure': {
      global $_amazon_search_amazon_shop_URI;
      $config_data = $_POST['edit'];
      if ($config_data) {
        variable_set('amazon_locale', $config_data['amazon_locale']);
        if ($config_data['amazon_associate_id']) {
          variable_set('amazon_associate_id', $config_data['amazon_associate_id']);
        }
      }
      $search_form = form_select('Locale', 'amazon_locale',
                             variable_get('amazon_locale', 0), array_keys($_amazon_search_amazon_shop_URI),
                             'Select the Amazon.com locale you are affiliated with',
                             0, FALSE, TRUE);
      $search_form .= form_textfield(t('Amazon Associate ID'), 'amazon_associate_id',
        variable_get('amazon_associate_id', AMAZON_SEARCH_AMAZON_ASSOCIATE_TAG), 30, 30,
        t('Lets Amazon.com know which associate to credit with the referral. If you do not fill in this field you will not earn commissions.'),
        '', TRUE);
      $search_form .= form_submit('Submit');
      break;
    }
    case 'manage': {
      global $user;
      // check to see if an import delete was requested
      $op = $_POST['op'];
      if ($op == 'Import') {
        $_amazon_locale_index =  variable_get('amazon_locale', '0');
        $_amazon_locale_list = array_keys($_amazon_search_amazon_shop_URI);
        $_amazon_locale = $_amazon_locale_list[$_amazon_locale_index];
        // get the array of ASINS to save
        $ASINList = array('AssociateTag'=>variable_get('amazon_associate_id', ''),
                          'AmazonShop'=>$_amazon_locale,
                          'Operation' => 'ItemLookup',
                          'ItemId' => implode(',',$_POST['ASINS']),
                          'ResponseGroup' => 'Request,Small,ItemAttributes,Images,Offers',
                          'MerchantId' => 'Featured');
        // do an Amazon ASIN query, returned as an array of amazon item objects
        $books_to_save = amazon_get_items($ASINList);
        // save them nodes!
        foreach ($books_to_save as $amazon_node) {
          $amazon_node->uid = $user->uid;
          $amazon_node->type = 'amazon-node';
          $amazon_node->status = variable_get("node_status$amazon_node->type", 1);
          $amazon_node->promote = variable_get("node_promote$amazon_node->type", 0);
          $amazon_node->moderate = variable_get("node_moderate$amazon_node->type", 0);
          $amazon_node->sticky = variable_get("node_sticky$amazon_node->type", 0);
          $amazon_node->revision = variable_get("node_revision$amazon_node->type", 0);
          $amazon_node->comment = variable_get("comment_$amazon_node->type", 2);
          $amazon_node->title = $amazon_node->Title;
          $existing_node = _amazon_product_db_data($amazon_node);
          if (!$existing_node) {
            module_invoke('node', 'save', $amazon_node);
          }
        }
      } elseif ($op == 'Delete Selected') {
        $nid_list = $_POST['delete_nid'];
        foreach ($nid_list as $nid) {
          node_delete(array('nid' => $nid, 'confirm' => 1));
        }
      }
      // drop through to the default case!!
    }
    default: {
      // make a table
      $amazonnodes = pager_query(_amazon_admin_page_query());
      while ($amazon_node = db_fetch_object($amazonnodes)) {
        $output_table .= theme('amazon_adminitem', $amazon_node);
      }
      $output_table = "<table border=\"1\">$output_table</table>".form_submit('Delete Selected');
      $output_table = form($output_table, 'post', 'index.php?q=admin/amazon/manage') . theme('pager');
      break;
    }
  }
  print theme('page', form($search_form, 'post', "index.php?q=admin/amazon/$admin_task") . '<hr />' . $output_table);
}


function _amazon_search_linkto($AmazonItem, $linkText) {
  return "<a href=\"$AmazonItem->DetailPageURL\" title=\"Purchase this item at Amazon.com\">$linkText</a>";
}

function _amazon_search_format_item($AmazonItem, $qParams) {

  $output = '';
  $qParams['def']['SearchIndex'] = $qParams['var']['SearchIndex'];
  $qParams['def']['op'] = 'Search';
  foreach ($qParams['def'] as $key =>$value) {
    if ($key!='q') $qstr[] = "$key=$value";
  }
  $output .= '  <div style="padding-left: 100px;padding-right: 100px;">';
  if ($AmazonItem->MediumImageURL) {
    // the image (and alignment) should be optional via admin page
    $output .= '  <div style="float:left">';
    $output .= _amazon_search_linkto($AmazonItem, "<img src=\"$AmazonItem->MediumImageURL\" height=\"$AmazonItem->MediumImageHeight\" width=\"$AmazonItem->MediumImageWidth\" hspace=\"5\" />");
    $output .= '  </div>';
  }
  $output .= '<strong>Title:</strong>&nbsp;&nbsp;'._amazon_search_linkto($AmazonItem, $AmazonItem->Title).'<br />';
  /**
    * Amazon.com may return multiple instances of these, and we want to be able to search on the returned
    * values so they get special handling
    *
  */
  if (is_array($AmazonItem->Author)) {
    foreach($AmazonItem->Author as $key => $value) {
      $qstr[] = "SearchField=Author";
      $qstr[] = "SearchFor=$value";
      $output .= '<strong>Author:</strong>&nbsp;&nbsp;<a href="';
      $output .= url('search/amazon/book', implode('&',$qstr));
      $output .= "\" title=\"Search for more books written by $value\"";
      $output .= ">$value</a><br />";
    }
  }
  // end of special case
  $output .= '<strong>ASIN:</strong>&nbsp;&nbsp;'.$AmazonItem->ASIN .'<br />';
  if ($AmazonItem->Binding) {
    $output .= "<strong>Binding:</strong> $AmazonItem->Binding <br />";
  }
  if ($AmazonItem->listFormattedPrice) {
    $output .= "<strong>List price:</strong> $AmazonItem->listFormattedPrice $AmazonItem->listCurrencyCode <br />";
  }
  if ($AmazonItem->FormattedPrice) {
    $output .= "<strong>Amazon price:</strong> $AmazonItem->FormattedPrice $AmazonItem->CurrencyCode<br /><br clear=\"all\" />";
  }
  $output .= '<br clear="all" /><hr style="padding-left: 15%;padding-right: 15%;">';
  $output .= '</div>';
  return $output;
}

function amazon_search_page() {
  global $_amazon_search_browse_fields;
  global $_amazon_search_browse_nodes;
  global $_amazon_search_amazon_shop_URI;
  global $_amazon_search_amazonDOM;

  $op = $_POST["op"];
  if ($op) {
    $_search_form_values = $_POST['edit'];
  } else {
    $_search_form_values = $_GET;
    $op = $_search_form_values['op'];
  }

  $_amazon_locale_index =  variable_get('amazon_locale', '0');
  $_amazon_locale_list = array_keys($_amazon_search_amazon_shop_URI);
  $_amazon_locale = $_amazon_locale_list[$_amazon_locale_index];

  if ($op) {
    $_amazon_search_params = array();
    // get the search parameters
    $_amazon_search_params['SubscriptionId'] =  AMAZON_SEARCH_AMAZON_SUBSCRIPTION_ID;
    $_amazon_search_params['AssociateTag'] = variable_get('amazon_associate_id', AMAZON_SEARCH_AMAZON_ASSOCIATE_TAG);
    $_amazon_search_params['Operation'] = $_search_form_values['Operation'];
    $_amazon_search_params['SearchIndex'] = $_search_form_values['SearchIndex'];
    $_amazon_search_params['ResponseGroup'] = $_search_form_values['ResponseGroup'];
    $_amazon_search_params['MerchantId'] = $_search_form_values['MerchantId'];
    $_amazon_search_params['AmazonShop'] = $_amazon_locale;
    if ($_search_form_values['BrowseField']) {
      $_amazon_search_params['BrowseNode'] = $_search_form_values['BrowseField'];
    }
    $_amazon_search_params[$_search_form_values['SearchField']] = urlencode($_search_form_values['SearchFor']);
    switch ($op) {
      CASE 'Search':
      CASE 'First': {
        $_amazon_search_params['ItemPage'] = 1;
        break;
      }
      case 'Next': {
        $_amazon_search_params['ItemPage'] = $_search_form_values['ItemPage'] + 1;
        break;
      }
      case 'Previous': {
        $_amazon_search_params['ItemPage'] = $_search_form_values['ItemPage'] - 1;
        break;
      }
      case 'Last': {
        $_amazon_search_params['ItemPage'] = $_search_form_values['TotalPages'];
        break;
      }
    }
    // do the query
    $_amazon_search_amazonDOM = amazon_get_DOM($_amazon_search_params);
    // return the array of items
    $_amazon_items = _amazon_items_array_from_DOM($_amazon_search_amazonDOM);
    // render the array
    $output = '<hr />';
    if (count($_amazon_items) > 0) {
      $_amazon_operation_request = _amazon_operation_request($_amazon_search_amazonDOM);
      foreach ($_amazon_items as $_amazon_item) {
        $output .= _amazon_search_format_item($_amazon_item, $_amazon_operation_request['Arguments']);
      }
      $_amazon_search_params['TotalPages'] = $_amazon_operation_request['stats']['TotalPages'];
      $_amazon_search_params['SearchField'] = $_search_form_values['SearchField'];
      $_amazon_search_params['SearchFor'] = $_search_form_values['SearchFor'];
      $_search_pager = _amazon_search_pager($_amazon_search_params);
    } else {
      $output = 'No items were found that match your query.<br />';
      $output .= '<a href="' . amazon_search_RESTURI($_amazon_search_params) . '">Test</a>';
    }
  }
  // the search form itself
  $search_form = "<div class=\"node-form\">";
  $search_form .= form_hidden('Operation', 'ItemSearch');
  $search_form .= form_hidden('ResponseGroup', 'Request,Small,ItemAttributes,Images,Offers');
  $search_form .= form_hidden('MerchantId', 'Featured');
  $search_form .= form_hidden('ItemPage', '1');
  $search_form .= form_hidden('TotalPages', $_amazon_operation_request['stats']['TotalPages']);
  $search_form .= form_hidden('SearchIndex', 'Books');
  $search_form .= form_group('', form_select(t('Search'), 'SearchField',
                               ($_search_form_values['SearchField'])?$_search_form_values['SearchField']:array('Keywords'=>'Keywords'),
                               $_amazon_search_browse_fields['Books'], '', 'size="4"', FALSE, TRUE)).
                    form_group('', form_select(t('Search Category'), 'BrowseField',
                               ($_search_form_values['BrowseField'])?$_search_form_values['BrowseField']:array('All'=>'0'),
                               array_merge(array('0'=> t('All')), $_amazon_search_browse_nodes[$_amazon_locale]),
                                '', 'size="4"', FALSE, TRUE)).
                    form_group('', form_textfield(t('Search for'), 'SearchFor',
                               ($_search_form_values['SearchFor'])?urldecode($_search_form_values['SearchFor']):'', 80, 127, '', '', TRUE));
  $search_form .= form_submit('Search').'</div>';
  $search_form .= '<div class="blocktitle" style="text-align: center"><em>in association with</em> <strong>Amazon.com</strong></div>';
  print theme("page",form($search_form).$output.$_search_pager);

}
/**
 * node hooks
*/
function amazon_access($op, $node) {
  global $user;
  switch (is_string($node)? $node : $node->type) {
    case 'amazon':
      if ($op == 'create') {
        return user_access('create amazon');
      }
      if ($op == 'update' || $op == 'delete') {
        if (user_access('edit amazon') && ($user->uid == $node->uid)) {
          return TRUE;
        }
      }
      break;
    case 'amazon-node':
      if ($op == 'create') {
        return user_access('create amazon-node');
      }
      if ($op == 'update' || $op == 'delete') {
        if (user_access('edit amazon-node')) {
          return TRUE;
        }
      }
      break;
  }
}

function amazon_delete(&$node) {
  $linked_nodes_query = db_query("SELECT nid FROM {amazonnode} WHERE ASIN = '$node->ASIN'");
  if (db_num_rows($linked_nodes_query) == 1) {
    db_query("DELETE FROM {amazonitem} WHERE ASIN = '$node->ASIN'");
  }
  db_query('DELETE FROM {amazonnode} WHERE nid = %d', $node->nid);

}

function amazon_form(&$node, &$param) {
  if (function_exists('taxonomy_node_form')) {
    $output = implode('', taxonomy_node_form($node->type, $node));
  }
  $output .= form_textfield('ASIN', 'ASIN', $node->ASIN, 15, 15, 'Enter the ASIN of the book.', '', TRUE);
  if ($node->type == 'amazon') {
    $output .= form_textarea('Body', 'body', $node->body, 60, 20);
    $output .= filter_form('format', $node->format);
  }
  return $output;
}
function amazon_help($section) {
  switch ($section) {
    case 'node/add#amazon':
      return t("Review an item available at Amazon.com.");
    case 'node/add#amazon-node':
      return t("Manually add an item from Amazon.com.");
  }
}
function amazon_insert($node) {
  if (!($node->type == 'amazon-node') AND ($node->new_node)) {
    _to_amazonnode($node);
  }
  db_query("REPLACE INTO {amazonitem} (ASIN, DetailPageURL, " .
           "SmallImageURL, SmallImageHeight, SmallImageWidth, ".
           "MediumImageURL, MediumImageHeight, MediumImageWidth, ".
           "LargeImageURL, LargeImageHeight, LargeImageWidth, ".
           "Author, Binding, listAmount, listCurrencyCode, listFormattedPrice," .
           "Title, Amount, CurrencyCode, FormattedPrice, PriceDate) " .
           "VALUES ('%s', '%s', '%s', %d, %d, '%s', %d, %d, '%s', %d, %d, '%s', '%s', %d, '%s', '%s', '%s', %d, '%s', '%s', '%s')",
           $node->ASIN, $node->DetailPageURL,
           $node->SmallImageURL, $node->SmallImageHeight, $node->SmallImageWidth,
           $node->MediumImageURL, $node->MediumImageHeight, $node->MediumImageWidth,
           $node->LargeImageURL, $node->LargeImageHeight, $node->LargeImageWidth,
           serialize($node->Author), $node->Binding, $node->listAmount, $node->listCurrencyCode, $node->listFormattedPrice,
           $node->Title, $node->Amount, $node->CurrencyCode, $node->FormattedPrice, date('Y-m-m H:i:s'));

  db_query("REPLACE INTO {amazonnode} (nid, ASIN, ntype) VALUES ($node->nid, '$node->ASIN', '$node->type')");
}

function amazon_load($node) {
  $ASINRec = db_fetch_object(db_query("SELECT `ASIN` FROM {amazonnode} WHERE `nid` = $node->nid"));
  $additions = db_fetch_object(db_query("SELECT * FROM {amazonitem} WHERE ASIN = '$ASINRec->ASIN'"));
  $additions->Author = unserialize($additions->Author);
  return $additions;
}
function amazon_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array('path' => 'node/add/amazon', 'title' => t('amazon item review'),
      'access' => user_access('create amazon'));
    $items[] = array('path' => 'admin/amazon',
                     'title' => t('amazon'),
                     'access' => user_access('edit amazon-node'),
                     'callback' => 'amazon_admin_page');
    $items[] = array('path' => 'admin/amazon/manage',
                     'title' => t('manage items'),
                     'callback' => 'amazon_admin_page',
                     'weight' => 0,
                     'type' => MENU_DEFAULT_LOCAL_TASK);
    $items[] = array('path' => 'admin/amazon/import',
                     'title' => t('import items'),
                     'callback' => 'amazon_admin_page',
                     'weight' => 1,
                     'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => 'admin/amazon/configure',
                     'title' => t('configure account'),
                     'callback' => 'amazon_admin_page',
                     'weight' => 2,
                     'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => 'search/amazon',
                     'title' => '&nbsp;'.t('Amazon.com'),
                     'access' => TRUE,
                     'type' => MENU_LOCAL_TASK,
                     'callback' => 'amazon_search_page');
  } else {
    $items[] = array('path' => 'node/add/amazon-node', 'title' => t('amazon node'),
      'access' => user_access('create amazon-node'));
  }
  return $items;
}
function amazon_node_name($node) {
  switch (is_string($node)? $node : $node->type) {
    case 'amazon':
      return('amazon item');
      break;
    case 'amazon-node':
      return 'amazon node';
      break;
  }
}
function amazon_node_types() {
  return array('amazon','amazon-node');
}
function amazon_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if (!(($node->type == 'amazon') or ($node->type == 'amazon-node'))) {
    switch ($op) {
      case 'validate': {
        if ($node->ASIN) $ASINList = explode(',', $node->ASIN);
        if (count($ASINList) > 0) {
          unset($node->amazonnode_data);
          $ASINS_as_keys = array_flip($ASINList);
          $ASINs_at_Amazon = _amazon_product_data_array($node);
          if (count($ASINs_at_Amazon)) {
            foreach($ASINs_at_Amazon as $ASIN) {
              $node->amazonnode_data[] = $ASIN;
              unset($ASINS_as_keys[$ASIN->ASIN]);
              $out_ASIN_list[] = $ASIN->ASIN;
            }
            if (count($ASINS_as_keys) > 0) {
              $ASINS_as_keys = array_flip($ASINS_as_keys);
              form_set_error('time', t('No data is available for ') . implode(',', $ASINS_as_keys));
            }
            $node->ASIN = implode(',',$out_ASIN_list);
          } else {
            form_set_error('time', t('No data is available for ') . $node->ASIN);
          }
        }
        break;
      }
      case 'update':
      case 'insert': {
        if ($node->nid) {
          db_query("DELETE FROM {amazonnode} WHERE nid = $node->nid");
        }
        if ($node->amazonnode_data) {
          foreach($node->amazonnode_data as $amazon_data) {
            db_query("REPLACE INTO {amazonnode} (nid, ASIN, ntype) VALUES ($node->nid, '$amazon_data->ASIN', '$node->type')");
            _to_amazonnode($amazon_data);
          }
        }
        break;
      }
      case 'delete': {
        db_query("DELETE FROM {amazonnode} where nid = $node->nid");
        break;
      }
      case 'form post': {
        if (!(($node->ASIN == 'amazon') OR ($node->ASIN == 'amazon-node'))) {
          return form_textfield('Related books', 'ASIN', $node->ASIN, 20, 100,
                                t('Enter a comma delimited list of ASINs for the related books.'));
        }
        break;
      }
      case 'load': {
        $ASINQuery = db_query("SELECT `ASIN` FROM {amazonnode} WHERE `nid` = $node->nid");
        while ($ASINRec = db_fetch_object($ASINQuery)) {
          $ASINList[] = $ASINRec->ASIN;
        }
        if (count($ASINList) > 0) $node->ASIN = implode(',', $ASINList);
        $node->amazonnode_data = _amazon_product_db_data_array($node);
        break;
      }
      case 'view': {
        $amazondata = $node->amazonnode_data;
        if ($amazondata) {
          foreach($amazondata as $amazon_data) {
            $related_links .= theme('amazon_related_link', $amazon_data);
          }
          $node->body = $node->body . $related_links;
        }
      }
      break;
    }
}
}
function amazon_perm() {
  return array('create amazon', 'edit amazon', 'create amazon-node', 'edit amazon-node');
}
function amazon_validate(&$node) {
  if ($node->ASIN) {
    if (_amazon_product_data($node)) {
        if (($node->type =='amazon-node') AND (arg(1) == 'add') AND (!$node->new_node)) {
        form_set_error('time', t('This ASIN is already in the database.'));
      }
    } else {
      form_set_error('time', t('This ASIN is not valid.'));
    }
  }
}

function amazon_view(&$node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  if ($teaser) {
    $node->teaser = theme('amazon_node', $node) . $node->teaser;
  } else {
    $node->body = theme('amazon_node', $node) . $node->body;
  }
}

/**
 * block hook
*/

function amazon_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'configure': {
      $output = form_textfield(t('Block title'),
                               'amazon_blocktitle',
                               variable_get('amazon_blocktitle', t('We recommend')),
                               30, 120, t('Enter the title for the Amazon product block'));
      return $output;
    }
    case 'save': {
      variable_set('amazon_blocktitle', $edit['amazon_blocktitle']);
    }
    case 'list': {
      $block[0]['info'] = t('Recomended book');
      return $block;
    }
    case 'view': {
      // get the number of amazonitem records
      $amazon_counter = db_fetch_object(db_query("SELECT COUNT(ASIN) AS count FROM {amazonitem}"));
      $max_record = $amazon_counter->count;
      // generate a random number between 1 and the count
      $random = rand(0, $max_record - 1);
      // get that one record
      $selected_book = db_fetch_object(db_query("SELECT * from {amazonitem} LIMIT $random,1"));
      $block['subject'] = variable_get('amazon_blocktitle', t('We recommend'));
      $block['content'] = '<div style="text-align: center;">';
      $block['content'] .= "<a href=\"$selected_book->DetailPageURL\" target=\"_blank\">";
      $block['content'] .= "<img src=\"$selected_book->MediumImageURL\" height=\"$selected_book->MediumImageHeight\" width=\"$selected_book->MediumImageWidth\" /><br />";
      $block['content'] .= '</a>';
      $block['content'] .= "<a href=\"$selected_book->DetailPageURL\" target=\"_blank\">";
      $block['content'] .= $selected_book->Title;
      $block['content'] .= '</a>';
      $block['content'] .= '</div>';
      return $block;
    }
  }
}
?>