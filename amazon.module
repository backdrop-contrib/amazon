<?php
// $Id$

/**
 * Amazon Integration
 *
 * Provides a Drupal wrapper and caching mechanism for the Amazon
 * Ecommerce APIs. This module provides no user-visible functionality
 * save configuration and setup.
 */

define('AMAZON_ECS_SCHEMA', '2007-07-16');

/**
 * Implementation of hook_menu. Adds the url path for the Amazon
 * settings page.
 */
function amazon_menu() {
  $items = array();
  $items['admin/settings/amazon'] = array(
    'title' => 'Amazon API',
    'description' => 'Global settings for the Amazon Ecommerce API.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_settings_form'),
    'file' => 'amazon_admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer amazon'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/settings/amazon/storage'] = array(
    'title' => 'Storage',
    'description' => 'Local data storage settings for Amazon products.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_storage_settings_form'),
    'file' => 'amazon_admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer amazon'),
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/settings/amazon/upgrade'] = array(
    'page callback' => '_amazon_upgrade',
    'file' => 'amazon_admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer amazon'),
    'type' => MENU_CALLBACK
  );
  $items['admin/settings/amazon/api'] = array(
    'title' => 'Settings',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK
  );

  return $items;
}

/**
 * Implementation of hook_perm
 */
function amazon_perm() {
  return array('administer amazon');
}


function amazon_http_request($operation, $parameters = array(), $locale = NULL) {
  $locale_data = amazon_locale_data($locale);

  // Populate the params with default data.
  $parameters += array(
    'Service' => 'AWSECommerceService',
    'Version' => AMAZON_ECS_SCHEMA,
    'AWSAccessKeyId' => variable_get('amazon_aws_access_key', '0CD9RCQYM0TBVH55NB82'),
    'Operation' => $operation,
  );
  if ($associate_id = amazon_get_associate_id()) {
    $parameters += array(
      'AssociateTag' => $associate_id,
    );
  }

  $params = array();
  foreach($parameters as $key => $value) {
    if (is_array($value)) {
      $value = implode(',', $value);
    }
    $params[] = urlencode($key) .'='. urlencode($value);
  }
  module_invoke_all('amazon_request', $parameters);
  $url = $locale_data['url'] .'?'. implode('&', $params);

  // Make the request and return a SimpleXML object.
  $results = drupal_http_request($url, array(), 'GET');
  $xml = new SimpleXMLElement($results->data);
  return $xml;
}

function amazon_item_lookup($item_ids = array(), $force_lookup = TRUE) {
  if (is_string($item_ids)) {
    $item_ids = array($item_ids);
  }
  $items = array();
  if (!$force_lookup) {
    $items = amazon_item_lookup_from_db($item_ids);
  }

  $items_to_fetch = array();
  foreach ($item_ids as $item_id) {
    if (!isset($items[$item_id])) {
      $items_to_fetch[] = $item_id;
    }
  }
  $items = amazon_item_lookup_from_web($items_to_fetch);

  return $items;
}

function amazon_item_lookup_from_web($item_ids = array()) {
  $params = array(
    'ItemId' => implode(',', $item_ids),
    'ResponseGroup' => 'Large',
  );
  $results = amazon_http_request('ItemLookup', $params);
  if (!empty($results->Error)) {
    return FALSE;
  }
  if (is_array($results->Items->Item)) {
    return (array)$results->Items->Item;
  }
  else {
    return array($results->Items->Item);
  }
}

function amazon_item_lookup_from_db($item_ids = array()) {
  $sql = "SELECT * FROM {amazon_item} ai WHERE asin IN (''";
  $params = array();
  foreach ($item_ids as $item_id) {
    $query .= ", '%s'";
    $params[] = $item_id;
  }
  $results = db_query($sql, $params);
  $return = array();
  while ($object = db_fetch_object($results)) {
    module_invoke_all('amazon_item_load', $object);
    $return[$object->asin] = $object;
  }
  return $return;
}

function amazon_item_preprocess(&$item) {
  if (isset($item->Feature)) {
    _amazon_clean_single($item, 'Feature');
  }

  if (isset($item->EditorialReviews)) {
    _amazon_clean_single($item->EditorialReviews, 'EditorialReview');
  }

  foreach (_amazon_participant_types() as $type) {
    if (isset($item->$type)) {
      _amazon_clean_single($item, $type);
    }
  }

  foreach (module_implements('amazon_item_preprocess') as $module) {
    $function = $module .'_amazon_item_preprocess';
    $function($item);
  }
}

function amazon_item_insert($item, $silent = FALSE) {
  $sql  = "INSERT INTO {amazon_item} (";
  $sql .= "asin, title, detailpageurl, salesrank, brand, publisher, ";
  $sql .= "manufacturer, studio, label, binding, releasedate, ";
  $sql .= "listpriceamount, listpricecurrencycode, listpriceformattedprice, ";
  $sql .= "productgroup, producttypename, timestamp) ";
  $sql .= "VALUES ('%s', '%s', %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', %d, '%s', '%s', '%s', '%s', %d)";

  db_query($sql, $item->ASIN, $item->Title, $item->DetailPageUrl, $item->SalesRank,
           $item->Brand, $item->Publisher, $item->Manufacturer, $item->Studio, $item->Label,
           $item->Binding, $item->ReleaseDate,
           $item->ListPrice->Amount, $item->ListPrice->CurrencyCode, $item->FormattedPrice,
           $item->ProductGroup, $item->ProductTypeName, time());

  // Handle the various credits for a product, including Artist, Author,
  // Actor, etc. We map these to a separate table.
  $sql = "INSERT INTO {amazon_item_participant} (asin, type, participant) VALUES ('%s', '%s', '%s')";
  foreach (_amazon_participant_types() as $type) {
    if (isset($item->$type) && in_array($type, amazon_get_cacheable_chunk_list())){
      foreach($item->$type as $participant) {
        db_query($sql, $item->ASIN, $type, $participant);
      }
    }
  }

  // Clean up the 'Features' data and see if the element exists.
  if (isset($item->Feature) && in_array('Feature', amazon_get_cacheable_chunk_list())) {
    $sql = "INSERT INTO {amazon_item_feature} (asin, feature) VALUES ('%s', '%s')";
    foreach($item->Feature as $feature) {
      db_query($sql, $item->ASIN, $feature);
    }
  }

  // Save the product images if they exist.
  if (isset($item->Feature) && in_array('ImageSets', amazon_get_cacheable_chunk_list())) {
    $sql = "INSERT INTO {amazon_item_image} (asin, size, height, width, url) VALUES ('%s', '%s', %d, %d, '%s')";
    foreach($item->ImageSets->ImageSet as $size => $data) {
      if ($size != '@attributes') {
        db_query($sql, $item->ASIN, $size, $data->Height, $data->Width, $data->URL);
      }
    }
  }

  // Save editorial reviews if they exist.
  if (isset($item->EditorialReviews) && in_array('EditorialReviews', amazon_get_cacheable_chunk_list())) {
    $sql = "INSERT INTO {amazon_item_editorial_reviews} (asin, source, content) VALUES ('%s', '%s', '%s')";
    foreach($item->EditorialReviews as $review) {
      db_query($sql, $item->ASIN, $review->Source, $review->Content);
    }
  }

  if (!$silent) {
    module_invoke_all('amazon_item_insert', $item);
  }
}

function amazon_item_update($item) {
  // We have boatloads of data to insert in here, so we're going to
  // cheat and blow away the old entries and re-insert them in 'silent'
  // mode.
  amazon_item_delete($item->ASIN, TRUE);
  amazon_item_insert($item, TRUE);

  module_invoke_all('amazon_item_update', $item);
}

function amazon_item_delete($item_id, $silent = FALSE) {
  if (!$silent) {
    module_invoke_all('amazon_item_delete', $item_id);
  }
  db_query("DELETE FROM {amazon_item_participant} WHERE asin = '%s'", $item->asin);
  db_query("DELETE FROM {amazon_item_feature} WHERE asin = '%s'", $item->asin);
  db_query("DELETE FROM {amazon_item_editorial_review} WHERE asin = '%s'", $item->asin);
  db_query("DELETE FROM {amazon_item_image} WHERE asin = '%s'", $item->asin);
}


/**
 * Utility functions for managing AmazonItem/Node relationships
 */

function amazon_item_node_save($asin, $nid, $module = 'amazon', $weight = 0) {
  amazon_item_node_delete($asin, $nid, $module);
  db_query("INSERT INTO {amazon_item_node} (asin, nid, module, weight) VALUES ('%s', %d, '%s', %d)", $asin, $nid, $module, $weight);
}

function amazon_item_node_delete($asin = NULL, $nid = NULL, $module = NULL) {
  $sql = "DELETE FROM {amazon_item_node} WHERE 1 = 1";
  $params = array();
  if (isset($asin)) {
    $sql = " AND asin = '%s'";
    $params[] = $asin;
  }

  if (isset($nid)) {
    $sql = " AND nid = %d";
    $params[] = $nid;
  }

  if (isset($module)) {
    $sql = " AND module = '%s'";
    $params[] = $module;
  }
  db_query($sql, $params);
}

/**
 * Misc. helper functions for managing the wide array of Amazon
 * data bitsies.
 */

function _amazon_clean_single(&$item, $type) {
  if (isset($item->{$type}) && is_string($item->{$type})) {
    $item->{$type} = array($item->{$type});
  }
}

function _amazon_participant_types() {
  return array('Actor', 'Artist', 'Author', 'Director');
}

function amazon_locale_data($locale = NULL) {
  $locales = amazon_locale_cache();
  if (!isset($locale)) {
    $locale = variable_get('amazon_locale', 'US');
  }
  return $locales[$locale];
}

function amazon_locale_cache($reset = FALSE) {
  static $locales;
  if (!isset($locales) || $reset) {
    if (!$reset && ($cache = cache_get('amazon:locale_data')) && !empty($cache->data)) {
      $locales = $cache->data;
    }
    else {
      $locales = _amazon_locale_data();
      cache_set('amazon:locale_data', $locales);
    }
  }
  return $locales;
}

function _amazon_locale_data() {
  $locales = array();
  $locales['US'] = array(
    'url'     => 'http://ecs.amazonaws.com/onca/xml',
    'name'    => t('United States'),
  );
  $locales['UK'] = array(
    'url'     => 'http://ecs.amazonaws.uk/onca/xml',
    'name'    => t('United Kingdom'),
  );
  $locales['JP'] = array(
    'url'     => 'http://ecs.amazonaws.jp/onca/xml',
    'name'    => t('Japan'),
  );
  $locales['FR'] = array(
    'url'     => 'http://ecs.amazonaws.fr/onca/xml',
    'name'    => t('France'),
  );
  $locales['DE'] = array(
    'url'     => 'http://ecs.amazonaws.de/onca/xml',
    'name'    => t('Germany'),
  );
  $locales['CA'] = array(
    'url'     => 'http://ecs.amazonaws.ca/onca/xml',
    'name'    => t('Canada'),
  );

  drupal_alter('amazon_locale', $locales);
  return $locales;
}

function amazon_get_associate_id() {
  switch (variable_get('amazon_associate_setting', 'author')) {
    case 'association':
      return 'drupal0a-20';
      break;
    case 'author':
      return 'viaposit-20';
      break;
    case 'custom':
      return variable_get('amazon_custom_associate_id', '');
      break;
    default:
      return FALSE;
  }
}

function amazon_get_cacheable_chunk_list() {
  $defaults = array(
    'Author', 'ImageSets', 'Artist'
  );
  return variable_get('amazon_extra_data', $defaults);
}

function amazon_cron() {
  // Here, we're going to chug through all the existing ASINs and update them.
  // We'll grab 20 at a time to avoid thrashing things.
  $sql = "SELECT asin FROM {amazon_item} WHERE timestamp < %d";
  $result = db_query_range($sql, time() - variable_get('amazon_refresh_schedule', 86400), 1, 20);
  $asins = array();

  while($item = db_fetch_object($result)) {
    $asins[] = $item->asin;
  }

  if ($items = amazon_item_lookup_from_web($asins)) {
    foreach ($items as $item) {
      amazon_item_update($item);
    }
  }
  else {
    watchdog('Amazon', t('Amazon items could not be updated.'));
  }
}
