<?php
// $Id$
/**
 * @file
 *   Provides additional behaviors and data type for amazon items which are
 *   DVDs, software, video games, music, etc.
 */

/**
 * Implements hook_theme().
 *
 */
function amazon_media_theme() {
  $templates = array(
    'amazon_inline_item_dvd' => array(
      'variables' => array('item' => array()),
      'file' => 'amazon_media.theme.inc',
    ),
    'amazon_inline_item_software' => array(
      'variables' => array('item' => array()),
      'file' => 'amazon_media.theme.inc',
    ),
    'amazon_inline_item_video_games' => array(
      'variables' => array('item' => array()),
      'file' => 'amazon_media.theme.inc',
    ),
    'amazon_inline_item_console_video_games' => array(
      'variables' => array('item' => array()),
      'function' => 'theme_amazon_inline_item_video_games',
      'file' => 'amazon_media.theme.inc',
    ),
    'amazon-item-book-details' => array(
      'variables' => array('item' => array()),
      'template' => 'amazon-item-book-details',
    ),
    'amazon-item-dvd-details' => array(
      'variables' => array('item' => array()),
      'template' => 'amazon-item-dvd-details',
    ),
    'amazon-item-software-details' => array(
      'variables' => array('item' => array()),
      'template' => 'amazon-item-software-details',
    ),
    'amazon-item-video-games-details' => array(
      'variables' => array('item' => array()),
      'template' => 'amazon-item-video-games-details',
    ),
    );
  return $templates;
}

// Because we aren't defining our own stuff here, just providing some
// high-specificity templates for theme_amazon_item, we'll add this
// module's directory to the list of paths to search for when finding
// amazon_item tpl's.
function amazon_media_theme_registry_alter(&$theme_registry) {
  $theme_registry['amazon_item']['theme path'] = drupal_get_path('module', 'amazon_media');
  if (!empty($theme_registry['amazon_item'])) {
    // We'll try our best to avoid stepping on theme template files.
    if (!empty($theme_registry['amazon_item']['theme_paths']) && count($theme_registry['amazon_item']['theme paths']) > 1) {
      $theme = array_pop($theme_registry['amazon_item']['theme paths']);
    }
    $theme_registry['amazon_item']['theme paths'][] = drupal_get_path('module', 'amazon_media');
    if (isset($theme)) {
      $theme_registry['amazon_item']['theme paths'][] = $theme;
    }
  }
}

/**
 * Implements hook_preprocess.
 *
 * @param $variables
 */
function amazon_media_preprocess_amazon_item(&$variables) {
  if (!empty($variables['theatricalreleasedate'])) {
    $date = explode('-', $variables['theatricalreleasedate']);
    $variables['theatricalreleaseyear'] = $date[0];
  }
  else {
    $variables['theatricalreleaseyear'] = '';
  }

  if (!empty($variables['publicationdate'])) {
    $date = explode('-', $variables['publicationdate']);
    $variables['publicationyear'] = $date[0];
  }

  // Various bits we want to ensure have defaults.
  $variables += array(
    'director' => '',
    'actor' => '',
    'audiencerating' => t('NR - Not Rated'),
    'publicationyear' => '',
    'runningtime' => '',
    'theatricalreleaseyear' => '',
  );
}

/**
 * Load and return additional information for an Amazon item.
 * @param $item
 *   The item requiring additions.
 * @return
 *   The added array elements, as an array.
 */
function amazon_media_amazon_item_load($item) {
  $table = amazon_media_get_table_name($item);
  if (!empty($table)) {
    $additions = db_select($table)
      ->condition('asin', $item['asin'])
      ->fields($table)
      ->execute()
      ->fetchAssoc();
    return $additions;
  }
}

/**
 * Given an item, return the name of the table it's associated with.
 * @param $item
 *   populated amazon_item with $item['producttypename'] populated.
 * @return
 *   the name of the associated table.
 */
function amazon_media_get_table_name($item) {
  static $names = array('ABIS_BOOK' => 'amazon_book',
    'VIDEO_DVD' => 'amazon_dvd',
    'ABIS_DVD' => 'amazon_dvd',
    'ABIS_MUSIC' => 'amazon_music',
    'CONSOLE_VIDEO_GAMES' => 'amazon_software',
    'VIDEO_GAMES' => 'amazon_software',
    'SOFTWARE' => 'amazon_software',
  );
  if (!empty($names[$item['producttypename']])) {
    return $names[$item['producttypename']];
  }
}

/**
 * Insert the associated information into the related table.
 * @param $item
 *   Populated amazon item record.
 */
function amazon_media_amazon_item_insert($item) {
  static $item_keys = NULL;
  if (empty($item_keys)) {
    require_once('amazon_media.install');
    $schema = amazon_media_schema();
    $item_keys = $schema;
  }
  $table = amazon_media_get_table_name($item);

  if (!empty($table)) {

    // We need to present a record that only has the items in it used by
    // this table.
    $db_item = array_intersect_key($item, $item_keys[$table]['fields']);

    try {
      db_insert($table)
      ->fields($db_item)
      ->execute();
    }
    catch (Exception $e) {
      amazon_db_error_watchdog("Failed to insert item into amazon table", $e);
    }
  }
}

/**
 * Delete a record using the asin as key.
 * @param $asin
 *   the asin to delete.
 */
function amazon_media_amazon_item_delete($asin) {
  // This is pretty inefficient; we're going to thrash these tables
  // every time a product gets deleted or updated. We'll solve it later.
  db_delete('amazon_book')
    ->condition('asin', $asin)
  ->execute();
  db_delete('amazon_dvd')
    ->condition('asin', $asin)
  ->execute();
  db_delete('amazon_music')
    ->condition('asin', $asin)
  ->execute();
  db_delete('amazon_software')
    ->condition('asin', $asin)
  ->execute();
}

/**
 * Implements hook_views_api.
 */
function amazon_media_views_api() {
  return array('api' => 2);
}
